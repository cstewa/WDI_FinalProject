%h1 
  This is the static_pages

Bearing: 
%span#bearing
%br
%span#latitude
%br
%span#longitude
#br
%span#orientation

%br
#canvas
  .box{"data-bearing"=>"191"}
  .box{"data-bearing"=>"20", style:"background: green"}
  .box{"data-bearing"=>"350", style:"background: blue"}

:css
  #canvas {
    border: 1px solid black;
    height: 500px;
    margin: 10px;
    background: gray;
    position: relative;
  }

  .box{
    width: 30px;
    height: 30px;
    background: red;
    top: 50%;
    left: 30%;
    position: absolute;
  }


:javascript
  $(document).ready(function(){

    // Get orientation and position form start
    inform_orientation();
    get_position();

    window.addEventListener('orientationchange', inform_orientation);
    
    // This appends orientation
    function inform_orientation(){
      $('#orientation').text(window.orientation);
    }

    // This informs on bearing (based on compass)
    window.addEventListener('deviceorientation', function(e) {
      if (e.webkitCompassHeading != 0){
        bearing = e.webkitCompassHeading
        $('#bearing').text(bearing);

        // Focal Length is camera and orientation dependent
        focal_length = ($('#orientation').text() == 0) ? 42 : 62 // Get the focal length               

        boxes = $('.box');
        
        // Loop over each box
        for (var i = 0; i < boxes.length; ++i){
          current_box = $(boxes[i])
          box_bearing = current_box.data("bearing");

          if (Math.abs(box_bearing - bearing) < (focal_length / 2) || (box_bearing + bearing) % 360 < (focal_length / 2)){
            current_box.css("display", "");

            position_from_left = 100 * (bearing - (box_bearing - (focal_length / 2) )) / focal_length 

            // Compensate for 360 mod
            if (box_bearing < (focal_length/2) && bearing > (360 - focal_length / 2)) {
              position_from_left = 100 - (100*((focal_length - box_bearing) / focal_length ) )
            }
            else if (box_bearing > 360 - focoal_length && bearing < focal_length / 2) { 
            }
            // End of 360 mod calculations
            
            current_box.css("left", 100-position_from_left.toString() + "%");

          } else {
            current_box.css("display", "none");
          }

        }


      }
    }, false);
    
    

    // Get HTML5 Geolocation information
    function get_position(event){
      // Try HTML5 geolocation
      if(navigator.geolocation) {
        console.log(navigator.geolocation)
        navigator.geolocation.getCurrentPosition(show_pos, show_error);
      } else {
        alert("Sorry, your browser does not suport GeoLocation");
      }
    }

    // This will get latitude and longitude
    function show_pos(position) {
      var latitude = position.coords.latitude
      var longitude = position.coords.longitude
      $('#latitude').text(latitude);
      $('#longitude').text(longitude);
    };

    function show_error(){};

  });
